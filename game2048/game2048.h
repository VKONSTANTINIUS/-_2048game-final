#ifndef GAME2048_H  // Директиви препроцесора для запобігання багаторазовому включенню (include guard)
#define GAME2048_H

#define _CRT_SECURE_NO_WARNINGS  // Вимкнення попереджень безпеки (для роботи з файлами)
#include <iostream>  // Для введення/виведення (cout, cin)
#include <iomanip>  // Для форматування виводу (setw)
#include <cstdlib>  // Для загальних утиліт (rand, srand, system)
#include <ctime>  // Для роботи з часом (time)
#include <windows.h>  // Для функцій, специфічних для Windows (HANDLE, COORD, SetConsoleCursorPosition, GetStdHandle, SetConsoleTextAttribute, Beep, Sleep)
#include <conio.h>  // Для небуферизованого введення з консолі (_getch)

// --- змінні та константи ---

extern HANDLE h;  // HANDLE для консолі, використовується для встановлення кольору та позиції курсора

// Перерахування для кодів клавіш напрямків та керування
enum direction { DOWN = 80, UP = 72, LEFT = 75, RIGHT = 77, ENTER = 13, ESC = 27 };
// Розмір меню
const int MENU_SIZE = 3;
// Елементи меню (константний масив рядків)
extern const char* menuItems[MENU_SIZE];
// Розмір ігрового поля (4 x 4)
const int BOX_SIZE = 4;
// Значення, яке потрібно досягти для перемоги
const int WIN_COUNT = 2048;
// Двовимірний масив, що представляє ігрове поле
extern int board[BOX_SIZE][BOX_SIZE];
// Поточний рахунок гравця
extern int score;

// --- Прототипи функцій налаштувань консолі ---

// Функція для початкового налаштування консолі (розмір, заголовок, приховування курсора)
void ConsoleSett();
// Функція для встановлення позиції курсора в консолі
void setCursorPos(int x, int y);
// Функція для встановлення кольору тексту в консолі
void setColor(int color);

// --- Прототипи функцій для роботи з меню ---

// Функція для малювання рамки навколо вибраного пункту меню
void drawFrame(int x, int y, int width, int height, int color);
// Функція для виведення ігрового меню на екран
void drawMenu(int selected);
// Функція для ініціалізації та обробки логіки ігрового меню
void menu_init();

// --- Прототипи функцій гри ---

// Функція для очищення ігрового поля (заповнення нулями)
void set_board();
// Функція для додавання нового числа (2 або 4) у випадкову вільну клітинку
void add_number();
// Функція для виведення поточного стану ігрового поля та рахунку на екран
void draw_board();
// Функція для обробки руху плиток вгору
void move_up();
// Функція для обробки руху плиток вниз
void move_down();
// Функція для обробки руху плиток вліво
void move_left();
// Функція для обробки руху плиток вправо
void move_right();

// --- Прототипи логічних функцій для визначення стану гри ---

// Перевіряє, чи всі клітинки на ігровому полі зайняті
bool is_full();
// Перевіряє, чи гравець досяг переможного значення (WIN_COUNT)
bool is_won();
// Перевіряє, чи можливі подальші ходи (чи є злиття або вільні клітинки)
bool no_move();

// Основна функція, яка керує ігровим процесом
void new_game();

// --- Прототипи функцій збереження/завантаження ---

// Функція для автоматичного збереження стану гри у файл
void autosave(const char* filename);
// Функція для завантаження стану гри з файлу
void loadsave(const char* filename);

// Функція, що відображає анімацію завантаження
void loading();

#endif // GAME2048_H
